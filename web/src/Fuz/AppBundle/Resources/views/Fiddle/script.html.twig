{# FuzAppBundle:Fiddle:script.html.twig #}
{# Included by: FuzAppBundle:Fiddle:index.html.twig #}

{# Used to work on template's prototype before displaying it #}
<div id="template-container" class="hide"></div>

<script type="text/javascript">

$(document).ready(function() {

    {#
     #  Add a template button
     #  Used in FuzAppBundle:Fiddle:templates-pane.html.twig
     #}
    $('body').on('click', '.add-template', function () {
        var templates = $('#templates');
        var prototype = templates.data('prototype');
        var max_templates = 10; {# fiddle.max_templates #}
        for (var index = 0; (index < max_templates); index++) {
            var template = $(prototype.replace(/__name__/g, index));
            var container = $('#template-container');
            var id = container.html(template).find('.template').data('id');
            container.empty();
            if ($('#row-' + id).length === 0) {
                template.find(".text-danger").remove().end().appendTo(templates);
                initCodeMirrorForTemplate($('#row-' + id).find('textarea').attr('id'));
                if ($('.template').length === max_templates) {
                    $('#add-template').addClass('hide');
                }
                break ;
            }
        }
        $('.filename-template-div')
                .removeClass('col-md-12 col-sm-12')
                .addClass('col-md-7 col-sm-7')
        ;
        $('.main-template-div').removeClass('hide');
        $('.delete-template-div').removeClass('hide');
    });

    {#
     #  Remove a template button
     #  Used in FuzAppBundle:Fiddle:templates-theme.html.twig
     #}
    $('body').on('click', '.delete-template', function () {
       if ($('.template').length === 1) {
           return ;
       }

       var id = '#row-' + $(this).data('id');
       if ($(id).find(':checkbox').prop('checked')) {
           var first = $('.template').not(id).first();
           first.find(':checkbox').prop('checked', true);
           first
                   .find('.main-template')
                   .removeClass('btn-default')
                   .addClass('btn-primary')
                   .find('span.glyphicon')
                   .removeClass('glyphicon-unchecked')
                   .addClass('glyphicon-check')
           ;
       }

       $(id).remove();
       $('#add-template').removeClass('hide');

       if ($('.template').length === 1) {
           $('.filename-template-div')
                   .removeClass('col-md-7 col-sm-7')
                   .addClass('col-md-12 col-sm-12')
           ;
           $('.main-template-div').addClass('hide');
           $('.delete-template-div').addClass('hide');
       }

    }); // $.on

    if ($('.template').length > 1) {
        $('.filename-template-div')
                .removeClass('col-md-12 col-sm-12')
                .addClass('col-md-7 col-sm-7')
        ;
        $('.main-template-div').removeClass('hide');
        $('.delete-template-div').removeClass('hide');
    }

    {#
     #  Set as main template button
     #  Used in FuzAppBundle:Fiddle:templates-theme.html.twig
     #}
    $('body').on('click', '.main-template', function () {
        var ticked = $(this).data('id');
        $('.template').each(function() {
            var that = $(this);
            if (that.data('id') === ticked) {
                that.find(':checkbox').prop('checked', true);
                that
                        .find('.main-template')
                        .removeClass('btn-default')
                        .addClass('btn-primary')
                        .find('span.glyphicon')
                        .removeClass('glyphicon-unchecked')
                        .addClass('glyphicon-check')
                ;
            } else {
                that.find(':checkbox').prop('checked', false);
                that
                        .find('.main-template')
                        .removeClass('btn-primary')
                        .addClass('btn-default')
                        .find('span.glyphicon')
                        .removeClass('glyphicon-check')
                        .addClass('glyphicon-unchecked')
                ;
            }
        }); // $.each
    }); // $.on

    {#
     #  Template Syntax Highlighting Loader
     #  Used in FuzAppBundle:Fiddle:templates-theme.html.twig
     #}
    var initCodeMirrorForTemplate = function (id) {
        return CodeMirror.fromTextArea(document.getElementById(id), {
            lineNumbers: true,
            mode: {
                name: "jinja2"
            },
            indentUnit: 4,
            indentWithTabs: false,
            smartIndent: true,
            fixedGutter: true,
            extraKeys: {
                Tab: function (cm) {
                    var spaces = Array(cm.getOption("indentUnit") + 1).join(" ");
                    cm.replaceSelection(spaces, 'end');
                }
            }
        }).on('change', function(cm) {
            $('#' + id).html(cm.getValue());
        });
    };

     $('.codemirror-template').each(function() {
         var that = $(this);
         initCodeMirrorForTemplate(that.attr('id'));
     });

    {#
     #  Context Syntax Highlighting Loader
     #  Used in FuzAppBundle:Fiddle:context-pane.html.twig
     #}
     var convertContextModeToCodeMirrorMode = function(id) {
        var selectedMode = $('#' + $('#' + id).data('format-id')).val();
        var codeMirrorMode = null;
        switch (selectedMode) {
            case 'YAML':
                codeMirrorMode = 'yaml';
                break;
            case 'XML':
                codeMirrorMode = 'xml';
                break;
            case 'JSON':
                codeMirrorMode = 'javascript';
                break;
            case 'INI':
                codeMirrorMode = 'properties';
                break;
            default:
                codeMirrorMode = 'text';
                break;
        }
        return codeMirrorMode;
     };

    var initCodeMirrorForContext = function (id) {
        return CodeMirror.fromTextArea(document.getElementById(id), {
            lineNumbers: true,
            mode: {
                name: convertContextModeToCodeMirrorMode(id)
            },
            indentUnit: 4,
            indentWithTabs: false,
            smartIndent: true,
            fixedGutter: true,
            extraKeys: {
                Tab: function (cm) {
                    var spaces = Array(cm.getOption("indentUnit") + 1).join(" ");
                    cm.replaceSelection(spaces, 'end');
                }
            }
        });
    };

    var contextEditor = initCodeMirrorForContext($('.codemirror-context').attr('id'));
    contextEditor.on('change', function(cm) {
        $('.codemirror-context').html(cm.getValue());
    });

    {#
     #  Context Syntax Highlighting Switcher
     #  Used in FuzAppBundle:Fiddle:context-pane.html.twig
     #}
    $('body').on('change', '.switcher-context-format', function() {
        contextEditor.setOption("mode", convertContextModeToCodeMirrorMode($(this).data('content-id')));
    });

    {#
     #  Share link automatic selection
     #  Used in FuzAppBundle:Fiddle:actions.html.twig
     #}
     $('#share-modal').on('shown.bs.modal', function() {
        $('#select-share-link').click();
     });

    {#
     #  Make tags having a tag layout and URLs
     #  Used in FuzAppBundle:Fiddle:index.html.twig
     #}
    $('.tags-input').each(function() {
        var that = $(this);
        that.tagsInput({
            'width': (that.width() + 26) + 'px',
            'height': '34px',
            'defaultText': 'New tag...',
            'placeholderColor' : '#999',
            'onAddTag': function (tag) {
                var tags = that.val().split(',');
                if (tags.length > 5 {# fiddle.max_tags #} ) {
                    that.importTags(tags.slice(0, 5 {# fiddle.max_tags #} ).join(','));
                } else {
                    createClickableTags(tag);
                }
            }
        });
    });
    createClickableTags();

    {#
     #  Compiled code switcher
     #  Used in FuzAppBundle:Fiddle:result-compiled.html.twig
     #}
    $('body').on('change', '#compiled-switcher', function() {
        changeCompiledCode();
    });

    {#
     #  Toggle used to display / hide the resulting context in PHP
     #  Used in FuzAppBundle:Fiddle:result-context.html.twig
     #}
    $('body').on('click', '#result-context-toggle', function(e) {
        e.preventDefault();
        var link = $(this);
        var context = $('#result-context-php');
        if (context.is(':visible')) {
            link.html('Display context in PHP');
            context.addClass('hide');
        } else {
            link.html('Hide context in PHP');
            context.removeClass('hide');
        }
    });

    {#
     #  Fiddle's revisions switcher
     #  Used in FuzAppBundle:Fiddle:revision.html.twig
     #}
    $('body').on('change', '#revision-browser', function(e) {
        window.location = $(this).val();
    });

    {#
     #  Changes button's layout when choosing another Fiddle's visibility
     #  Used in FuzAppBundle:Fiddle:visibility.html.twig
     #}
    $('.visibility-selection').click(function() {
        $("#{{ form.visibility.vars.id }}").val($(this).data('value'));
        displayRightVisibilityButton();
    });

    {#
     #  Automatic run at startup if a saved fiddle was loaded
     #}
    {% if data.id %}
        $('#run').domAjax();
    {% endif %}

});

{#
 #  Function called before "Run" button is going to be proceeded
 #  Used in FuzAppBundle:Fiddle:index.html.twig
 #}
function beforeRunFiddle(elem) {
    $('.error-container').html('');
    $('.result-container').html('');
}

{#
 #  Ajax response handler used by the "Run" button
 #  Used in FuzAppBundle:Fiddle:index.html.twig
 #}
function processRunFiddleResponse(elem, response) {
    if (undefined !== response.errors) {
        $.symfony2.dispatchErrors(response.errors);
    }

    if (undefined !== response.result) {
        $('#result-pane').html(response.result);
        prettyPrint();
        changeCompiledCode();
    }

    if (undefined !== response.context) {
        $('#result-context').html(response.context);
    }

    return true;
};

{#
 #  Ajax response handler used by the "Save" and the
 #  "Save as new revision" buttons.
 #  Used in FuzAppBundle:Fiddle:actions.html.twig
 #  Used in FuzAppBundle:Fiddle:index.html.twig
 #}
function processSaveFiddleResponse(elem, response) {
    if (undefined !== response.errors) {
        $.symfony2.dispatchErrors(response.errors);
    }

    if (undefined !== response.relocate) {
        window.location = response.relocate;
    }

    return true;
};

{#
 #  Change button's layout when faving / unfaving a fiddle
 #  Used in FuzAppBundle:Fiddle:favorite.html.twig
 #}
function processFavFiddleResponse(elem, response)
{
    if (response.isFavorite) {
        elem.find('span.glyphicon').removeClass('glyphicon-star-empty').addClass('glyphicon-star');
    } else {
        elem.find('span.glyphicon').removeClass('glyphicon-star').addClass('glyphicon-star-empty');
    }
};

{#
 #  Ajax error handler
 #  Used in FuzAppBundle:Fiddle:index.html.twig
 #}
function handleAjaxErrors(elem, errorThrown) {
    $('#general-errors').html("We're sorry, but an error occured...");
};

{#
 #  Compiled code switcher
 #  Used in FuzAppBundle:Fiddle:result-compiled.html.twig
 #}
function changeCompiledCode() {
    $('.compiled-code').addClass('hide');
    var id = $( "#compiled-switcher option:selected" ).val();
    $('#compiled-' + id).removeClass('hide');
}

{#
 #  Transform tags to fiddle browser's links
 #  Used in FuzAppBundle:Fiddle:index.html.twig
 #}
function createClickableTags(tag) {
    var inputTag, escTag = null;

    if (undefined !== tag) {
        inputTag = tag.replace(/&/g, '&amp;').replace(/\s/g,' ').replace(/</g, '&lt;').replace(/>/g, '&gt;');
        escTag = $.symfony2.escape(tag);
    }

    var selector = $('#{{ form.tags.vars.id }}_tagsinput span.tag span');
    $(selector).each(function() {

        var that = $(this);
        var current = that.html().replace(/&nbsp;&nbsp;/g, '');

        if (undefined === tag) {
            escTag = $.symfony2.escape(current);
        }

        if ((undefined === tag) || (current === inputTag)) {
            that.html('<a href="{{ path('browse') }}/' + escTag + '">' + escTag + '</a>&nbsp;&nbsp;');
        }

    }); // $.each
}

{#
 #  Displaying the right Fiddle's visibility
 #  Used in FuzAppBundle:Fiddle:visibility.html.twig
 #}
function displayRightVisibilityButton()
{
    var current = $("#{{ form.visibility.vars.id }}").val();
    $('.visibility-open-modal').each(function() {
        var that = $(this);
        if (that.data('value') == current) {
            that.removeClass('hide');
        } else {
            that.addClass('hide');
        }
    });
}

</script>

{# FuzAppBundle:Fiddle:script.html.twig #}

{# Used to work on template's prototype before displaying it #}
<div id="template-container" class="hide"></div>

<script type="text/javascript">

$(document).ready(function() {

    {#
     #  Add a template button
     #  Used in FuzAppBundle:Fiddle:templates-pane.html.twig
     #}
    $('body').on('click', '.add-template', function () {
        var templates = $('#templates');
        var prototype = templates.data('prototype');
        var max_templates = 10; {# fiddle.max_templates #}
        for (var index = 0; (index < max_templates); index++) {
            var template = $(prototype.replace(/__name__/g, index));
            var container = $('#template-container');
            var id = container.html(template).find('.template').data('id');
            container.empty();
            if ($('#row-' + id).length === 0) {
                template.find(".text-danger").remove().end().appendTo(templates);
                initCodeMirrorForTemplate($('#row-' + id).find('textarea').attr('id'));
                if ($('.template').length === max_templates) {
                    $('#add-template').addClass('hide');
                }
                break ;
            }
        }
        $('.delete-template').removeClass('hide');
        $('.main-template').removeClass('hide');
    });

    {#
     #  Remove a template button
     #  Used in FuzAppBundle:Fiddle:templates-theme.html.twig
     #}
    $('body').on('click', '.delete-template', function () {
       if ($('.template').length === 1) {
           return ;
       }
       var id = '#row-' + $(this).data('id');
       if ($(id).find(':checkbox').prop('checked')) {
           var first = $('.template').not(id).first();
           first.find(':checkbox').prop('checked', true);
           first
                   .find('.main-template')
                   .removeClass('btn-default')
                   .addClass('btn-primary')
                   .find('span.glyphicon')
                   .removeClass('glyphicon-unchecked')
                   .addClass('glyphicon-check')
           ;
       }
       $(id).remove();
       $('#add-template').removeClass('hide');
       if ($('.template').length === 1) {
           $('.delete-template').addClass('hide');
           $('.main-template').addClass('hide');
       }
    });

    if ($('.template').length > 1) {
        $('.delete-template').removeClass('hide');
        $('.main-template').removeClass('hide');
    }

    {#
     #  Set as main template button
     #  Used in FuzAppBundle:Fiddle:templates-theme.html.twig
     #}
    $('body').on('click', '.main-template', function () {
        var ticked = $(this).data('id');
        $('.template').each(function() {
            var that = $(this);
            if (that.data('id') === ticked) {
                that.find(':checkbox').prop('checked', true);
                that
                        .find('.main-template')
                        .removeClass('btn-default')
                        .addClass('btn-primary')
                        .find('span.glyphicon')
                        .removeClass('glyphicon-unchecked')
                        .addClass('glyphicon-check')
                ;
            } else {
                that.find(':checkbox').prop('checked', false);
                that
                        .find('.main-template')
                        .removeClass('btn-primary')
                        .addClass('btn-default')
                        .find('span.glyphicon')
                        .removeClass('glyphicon-check')
                        .addClass('glyphicon-unchecked')
                ;
            }
        });
    });

    {#
     #  Template Syntax Highlighting Loader
     #  Used in FuzAppBundle:Fiddle:templates-theme.html.twig
     #}
    var initCodeMirrorForTemplate = function (id) {
        return CodeMirror.fromTextArea(document.getElementById(id), {
            lineNumbers: true,
            mode: {
                name: "jinja2"
            },
            indentUnit: 4,
            indentWithTabs: false,
            enterMode: "keep",
            tabMode: "shift",
            smartIndent: true,
            matchBrackets: true,
            fixedGutter: true,
            extraKeys: {
                Tab: function (cm) {
                    var spaces = Array(cm.getOption("indentUnit") + 1).join(" ");
                    cm.replaceSelection(spaces, 'end');
                }
            }
        }).on('change', function(cm) {
            $('#' + id).html(cm.getValue());
        });
    };

     $('.codemirror-template').each(function() {
         var that = $(this);
         initCodeMirrorForTemplate(that.attr('id'));
     });

    {#
     #  Context Syntax Highlighting Loader
     #  Used in FuzAppBundle:Fiddle:context-pane.html.twig
     #}
     var convertContextModeToCodeMirrorMode = function(id) {
        var selectedMode = $('#' + $('#' + id).data('format-id')).val();
        var codeMirrorMode = null;
        switch (selectedMode) {
            case 'YAML':
                codeMirrorMode = 'yaml';
                break;
            case 'XML':
                codeMirrorMode = 'xml';
                break;
            case 'JSON':
                codeMirrorMode = 'javascript';
                break;
            case 'INI':
                codeMirrorMode = 'properties';
                break;
            default:
                codeMirrorMode = 'text';
                break;
        }
        return codeMirrorMode;
     };

    var initCodeMirrorForContext = function (id) {
        return CodeMirror.fromTextArea(document.getElementById(id), {
            lineNumbers: true,
            mode: {
                name: convertContextModeToCodeMirrorMode(id)
            },
            indentUnit: 4,
            indentWithTabs: false,
            enterMode: "keep",
            tabMode: "shift",
            smartIndent: true,
            matchBrackets: true,
            fixedGutter: true,
            extraKeys: {
                Tab: function (cm) {
                    var spaces = Array(cm.getOption("indentUnit") + 1).join(" ");
                    cm.replaceSelection(spaces, 'end');
                }
            }
        });
    };

    var contextEditor = initCodeMirrorForContext($('.codemirror-context').attr('id'));
    contextEditor.on('change', function(cm) {
        $('.codemirror-context').html(cm.getValue());
    });

    {#
     #  Context Syntax Highlighting Switcher
     #  Used in FuzAppBundle:Fiddle:context-pane.html.twig
     #}
    $('body').on('change', '.switcher-context-format', function () {
        contextEditor.setOption("mode", convertContextModeToCodeMirrorMode($(this).data('content-id')));
    });

});

{#
 #  Function called before "Run" button is going to be proceeded
 #  Used in FuzAppBundle:Fiddle:index.html.twig
 #}
function beforeRunFiddle(elem) {
    $('.error-container').html('');
}

{#
 #  Ajax response handler used by the "Run" button
 #  Used in FuzAppBundle:Fiddle:index.html.twig
 #}
function processRunFiddleResponse(elem, response) {
    if (undefined !== response.errors) {
        $.symfony2.dispatchErrors(response.errors);
    }
    if (undefined !== response.result) {
        $('#result-pane').html(response.result);
        prettyPrint();
        changeCompiledCode();
    }
    return true;
};

{#
 #  Ajax error handler
 #  Used in FuzAppBundle:Fiddle:index.html.twig
 #}
function handleAjaxErrors(elem, errorThrown) {
    $('#general-errors').html("We're sorry, but an error occured...");
};

{#
 #  Compiled code switcher
 #  Used in FuzAppBundle:Fiddle:result-compiled.html.twig
 #}
function changeCompiledCode() {
    $('.compiled-code').addClass('hide');
    var id = $( "#compiled-switcher option:selected" ).val();
    $('#compiled-' + id).removeClass('hide');
}
$('body').on('change', '#compiled-switcher', function() {
    changeCompiledCode();
});

</script>
